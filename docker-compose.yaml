services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: my-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: my-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      Key change: Modify listeners configuration
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      Wait for Kafka to be fully available
      echo 'Waiting for Kafka to be ready...'
      cub kafka-ready -b kafka:29092 1 60
      
      Create topics - using the internal listener
      echo 'Creating Kafka topics...'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic slack-worker --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic sms-worker --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic email-worker --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic notifications-dlq --partitions 1 --replication-factor 1
      
      Verify topics were created
      echo 'Verifying topic creation:'
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo 'Topic creation complete!'
      "
    restart: "no"
  
  notification-service:
    image: notification-service:latest
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      no_cache: true
    ports:
      - "8081:8080"
    volumes:
      - ./notification-service/logs.log:/app/logs.log
    environment:
      - ENV=dev
    restart: on-failure

    
  email-worker:
    image: email-worker:latest
    build:
      context: ./email-worker
      dockerfile: Dockerfile
      no_cache: true
    ports:
      - "8080:8080"
    volumes:
      - ./email-worker/logs.log:/app/logs.log
    environment:
      - ENV=dev
    restart: on-failure


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      # Mount the Prometheus configuration file (see below)
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

volumes:
  kafka-data:
  prometheus_data: